/*
 * This is a generic interface source file, the file will be dedicated to parse program.
 * after parsing, will according to choose to generate different. C/h /. Java/CPP /. HPP/cs file
 * generic interface to writing standards are as follows:
 * note: annotation style reference c language annotation style, on this basis, two limit;
 * Block comments are used to explain the function of the interface, and line comments are used to explain the meaning of the element.*
 * interface ID: cannot be repeated,ID is 16 bits, decimal or hexadecimal automatic recognition, 
 * but it is recommended to use only one base for a file;* support type: support base type 8 bit 16 bit 32 bit signed plastic, 
 * unsigned plastic;64-bit unsigned plastic, 32-bit floating point;Bool type;You can combine arrays and custom types at will.
 * And custom types can also be infinite nested arrays
 * Demo:
 * DemoInterface = 0x0001
 * {
 * 		Send = 
 * 		{
 * 			u8 ele_m1;						//comment of ele_m1
 * 			u8 * m2_array;					//comment of m2_array
 * 			SubClass 
 * 			{
 * 				u16 m1_ele;
 * 				u32 [] m2_array;
 * 			} m3_subClass;
 * 		}
 * 		Return = 
 * 		{
 * 			SubClassArray []
 * 			{
 * 				u64 m1;
 * 				f32 m2;
 * 			} retA;
 * 		}
 * }
 */


/* this type was test type */
StudetInfo = 0x0001
{
	Send = 
	{
		u32 * studentID;			//student ID 
	}
	Return = 
	{
		StudentInturduce []
		{
			bool isman;
			u32 ID;
			string name;
			Class [] 
			{
				string className;
				s8 grand;
			} classType;
		} stus;				//student infomation 
	}
}

TeacherInfo = 0x0002
{
	Send = 
	{
		u32 * teacherID;
	}
	Return = 
	{
		TeacherIntroduce []
		{
			BaseInfo
			{
				u8 age;
				bool isman;
				u8 height_cm;
				u8 weight_kg;
			} base;
			u32 salary;
			u32 ID;
		} teachers;
	}
}

